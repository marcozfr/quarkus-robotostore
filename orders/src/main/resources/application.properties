quarkus.http.port=8090

quarkus.http.cors=true

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=ordersUser
quarkus.datasource.password=ordersPassword
quarkus.datasource.reactive.url=postgresql://localhost:5432/ordersdb
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/ordersdb
quarkus.datasource.jdbc.max-size=8
quarkus.datasource.jdbc.min-size=2
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.database.log.sql=true
quarkus.hibernate-orm.database.sql-load-script=import.sql

quarkus.application.name=Orders management - v1
quarkus.log.level=INFO

quarkus.log.category.org.hibernate.level=TRACE
quarkus.log.category.io.quarkus.hibernate.orm.level=TRACE
quarkus.log.category.io.undertow.request.security.level=INFO

kafka.bootstrap.servers=localhost:9092

mp.messaging.outgoing.products.connector=smallrye-kafka
mp.messaging.outgoing.products.topic=lu4a4wtf-products
mp.messaging.outgoing.products.value.serializer=org.example.sample.products.serializer.ProductSerializer

## UsersApi/mp-rest/url=http://localhost:8090/
## UsersApi/mp-rest/scope=javax.inject.Singleton
users-api/mp-rest/url=http://localhost:8095/
users-api/mp-rest/scope=javax.inject.Singleton

org.example.sample.products.client.ProductsApi/mp-rest/url=http://localhost:8085/
org.example.sample.products.client.ProductsApi/mp-rest/scope=javax.inject.Singleton

quarkus.jaeger.service-name=orders
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n